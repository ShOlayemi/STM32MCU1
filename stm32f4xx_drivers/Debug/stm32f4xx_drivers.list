
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a08  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08000b90  08000b90  00001b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c5c  08000c5c  00001c6c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000c5c  08000c5c  00001c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000c64  08000c6c  00001c6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c64  08000c64  00001c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000c68  08000c68  00001c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001c6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001c6c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001c6c  2**0
                  CONTENTS, READONLY
 13 .debug_line   00001b1f  00000000  00000000  00001c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 0000004f  00000000  00000000  000037bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00001513  00000000  00000000  0000380a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000004ff  00000000  00000000  00004d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000180  00000000  00000000  00005220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009599  00000000  00000000  000053a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000118  00000000  00000000  0000e939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00000e7e  00000000  00000000  0000ea51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0000f8cf  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000005a4  00000000  00000000  0000f914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000b78 	.word	0x08000b78

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000b78 	.word	0x08000b78

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001d8:	480d      	ldr	r0, [pc, #52]	@ (8000210 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80001dc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001e0:	480c      	ldr	r0, [pc, #48]	@ (8000214 <LoopForever+0x6>)
  ldr r1, =_edata
 80001e2:	490d      	ldr	r1, [pc, #52]	@ (8000218 <LoopForever+0xa>)
  ldr r2, =_sidata
 80001e4:	4a0d      	ldr	r2, [pc, #52]	@ (800021c <LoopForever+0xe>)
  movs r3, #0
 80001e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001e8:	e002      	b.n	80001f0 <LoopCopyDataInit>

080001ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001ee:	3304      	adds	r3, #4

080001f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001f4:	d3f9      	bcc.n	80001ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000220 <LoopForever+0x12>)
  ldr r4, =_ebss
 80001f8:	4c0a      	ldr	r4, [pc, #40]	@ (8000224 <LoopForever+0x16>)
  movs r3, #0
 80001fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001fc:	e001      	b.n	8000202 <LoopFillZerobss>

080001fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000200:	3204      	adds	r2, #4

08000202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000204:	d3fb      	bcc.n	80001fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000206:	f000 fc85 	bl	8000b14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800020a:	f000 f883 	bl	8000314 <main>

0800020e <LoopForever>:

LoopForever:
  b LoopForever
 800020e:	e7fe      	b.n	800020e <LoopForever>
  ldr   r0, =_estack
 8000210:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000214:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000218:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800021c:	08000c6c 	.word	0x08000c6c
  ldr r2, =_sbss
 8000220:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000224:	2000001c 	.word	0x2000001c

08000228 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000228:	e7fe      	b.n	8000228 <ADC_IRQHandler>
	...

0800022c <delay>:

#include<string.h>
#include "stm32f407xx.h"

void delay(void)
{
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000 ; i ++);
 8000232:	2300      	movs	r3, #0
 8000234:	607b      	str	r3, [r7, #4]
 8000236:	e002      	b.n	800023e <delay+0x12>
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	3301      	adds	r3, #1
 800023c:	607b      	str	r3, [r7, #4]
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	4a04      	ldr	r2, [pc, #16]	@ (8000254 <delay+0x28>)
 8000242:	4293      	cmp	r3, r2
 8000244:	d9f8      	bls.n	8000238 <delay+0xc>
}
 8000246:	bf00      	nop
 8000248:	bf00      	nop
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr
 8000254:	0007a11f 	.word	0x0007a11f

08000258 <SPI2_GPIOInits>:
 *

 */

void SPI2_GPIOInits(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 800025e:	4b11      	ldr	r3, [pc, #68]	@ (80002a4 <SPI2_GPIOInits+0x4c>)
 8000260:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000262:	2302      	movs	r3, #2
 8000264:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000266:	2305      	movs	r3, #5
 8000268:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800026a:	2300      	movs	r3, #0
 800026c:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800026e:	2300      	movs	r3, #0
 8000270:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000272:	2302      	movs	r3, #2
 8000274:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000276:	230d      	movs	r3, #13
 8000278:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	4618      	mov	r0, r3
 800027e:	f000 f97d 	bl	800057c <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000282:	230f      	movs	r3, #15
 8000284:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	4618      	mov	r0, r3
 800028a:	f000 f977 	bl	800057c <GPIO_Init>
	//SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
	//GPIO_Init(&SPIPins);


	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800028e:	230c      	movs	r3, #12
 8000290:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	4618      	mov	r0, r3
 8000296:	f000 f971 	bl	800057c <GPIO_Init>


}
 800029a:	bf00      	nop
 800029c:	3710      	adds	r7, #16
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	40020400 	.word	0x40020400

080002a8 <SPI2_Inits>:

void SPI2_Inits(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b088      	sub	sp, #32
 80002ac:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 80002ae:	4b0c      	ldr	r3, [pc, #48]	@ (80002e0 <SPI2_Inits+0x38>)
 80002b0:	603b      	str	r3, [r7, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 80002b2:	2301      	movs	r3, #1
 80002b4:	717b      	strb	r3, [r7, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80002b6:	2301      	movs	r3, #1
 80002b8:	713b      	strb	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32;
 80002ba:	2304      	movs	r3, #4
 80002bc:	71bb      	strb	r3, [r7, #6]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 80002be:	2300      	movs	r3, #0
 80002c0:	71fb      	strb	r3, [r7, #7]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 80002c2:	2300      	movs	r3, #0
 80002c4:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 80002c6:	2300      	movs	r3, #0
 80002c8:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; //Hardware slave management enabled for NSS pin
 80002ca:	2300      	movs	r3, #0
 80002cc:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI2handle);
 80002ce:	463b      	mov	r3, r7
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 fb45 	bl	8000960 <SPI_Init>
}
 80002d6:	bf00      	nop
 80002d8:	3720      	adds	r7, #32
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	40003800 	.word	0x40003800

080002e4 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 80002ea:	4b09      	ldr	r3, [pc, #36]	@ (8000310 <GPIO_ButtonInit+0x2c>)
 80002ec:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 80002ee:	2300      	movs	r3, #0
 80002f0:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80002f2:	2300      	movs	r3, #0
 80002f4:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002f6:	2302      	movs	r3, #2
 80002f8:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002fa:	2300      	movs	r3, #0
 80002fc:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	4618      	mov	r0, r3
 8000302:	f000 f93b 	bl	800057c <GPIO_Init>

}
 8000306:	bf00      	nop
 8000308:	3710      	adds	r7, #16
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	40020000 	.word	0x40020000

08000314 <main>:


int main(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b0b4      	sub	sp, #208	@ 0xd0
 8000318:	af00      	add	r7, sp, #0
	char user_data[] = "An Arduino Uno board is best suited for beginners who have just started using microcontrollers, on the other hand, Arduino Mega board is for enthusiasts who require a lot of I/O pins for their projects";
 800031a:	4a21      	ldr	r2, [pc, #132]	@ (80003a0 <main+0x8c>)
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	4611      	mov	r1, r2
 8000320:	22ca      	movs	r2, #202	@ 0xca
 8000322:	4618      	mov	r0, r3
 8000324:	f000 fc1a 	bl	8000b5c <memcpy>

	GPIO_ButtonInit();
 8000328:	f7ff ffdc 	bl	80002e4 <GPIO_ButtonInit>

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 800032c:	f7ff ff94 	bl	8000258 <SPI2_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 8000330:	f7ff ffba 	bl	80002a8 <SPI2_Inits>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI2,ENABLE);
 8000334:	2101      	movs	r1, #1
 8000336:	481b      	ldr	r0, [pc, #108]	@ (80003a4 <main+0x90>)
 8000338:	f000 fbcf 	bl	8000ada <SPI_SSOEConfig>

	while(1)
	{
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 800033c:	bf00      	nop
 800033e:	2100      	movs	r1, #0
 8000340:	4819      	ldr	r0, [pc, #100]	@ (80003a8 <main+0x94>)
 8000342:	f000 fa9f 	bl	8000884 <GPIO_ReadFromInputPin>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d0f8      	beq.n	800033e <main+0x2a>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 800034c:	f7ff ff6e 	bl	800022c <delay>

		//enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,ENABLE);
 8000350:	2101      	movs	r1, #1
 8000352:	4814      	ldr	r0, [pc, #80]	@ (80003a4 <main+0x90>)
 8000354:	f000 fba5 	bl	8000aa2 <SPI_PeripheralControl>

		//first send length information
		uint8_t dataLen = strlen(user_data);
 8000358:	1d3b      	adds	r3, r7, #4
 800035a:	4618      	mov	r0, r3
 800035c:	f7ff ff34 	bl	80001c8 <strlen>
 8000360:	4603      	mov	r3, r0
 8000362:	b2db      	uxtb	r3, r3
 8000364:	70fb      	strb	r3, [r7, #3]
		SPI_SendData(SPI2,&dataLen,1);
 8000366:	1cfb      	adds	r3, r7, #3
 8000368:	2201      	movs	r2, #1
 800036a:	4619      	mov	r1, r3
 800036c:	480d      	ldr	r0, [pc, #52]	@ (80003a4 <main+0x90>)
 800036e:	f000 fb61 	bl	8000a34 <SPI_SendData>

		//to send data
		SPI_SendData(SPI2,(uint8_t*)user_data,strlen(user_data));
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	4618      	mov	r0, r3
 8000376:	f7ff ff27 	bl	80001c8 <strlen>
 800037a:	4602      	mov	r2, r0
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	4619      	mov	r1, r3
 8000380:	4808      	ldr	r0, [pc, #32]	@ (80003a4 <main+0x90>)
 8000382:	f000 fb57 	bl	8000a34 <SPI_SendData>

		//lets confirm SPI is not busy
		while( SPI_GetFlagStatus(SPI2,SPI_BUSY_FLAG) );
 8000386:	bf00      	nop
 8000388:	2180      	movs	r1, #128	@ 0x80
 800038a:	4806      	ldr	r0, [pc, #24]	@ (80003a4 <main+0x90>)
 800038c:	f000 fb3e 	bl	8000a0c <SPI_GetFlagStatus>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d1f8      	bne.n	8000388 <main+0x74>

		//Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,DISABLE);
 8000396:	2100      	movs	r1, #0
 8000398:	4802      	ldr	r0, [pc, #8]	@ (80003a4 <main+0x90>)
 800039a:	f000 fb82 	bl	8000aa2 <SPI_PeripheralControl>
	{
 800039e:	e7cd      	b.n	800033c <main+0x28>
 80003a0:	08000b90 	.word	0x08000b90
 80003a4:	40003800 	.word	0x40003800
 80003a8:	40020000 	.word	0x40020000

080003ac <GPIO_PeriClockControl>:
 * @Note              -  none

 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
 80003b4:	460b      	mov	r3, r1
 80003b6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80003b8:	78fb      	ldrb	r3, [r7, #3]
 80003ba:	2b01      	cmp	r3, #1
 80003bc:	d162      	bne.n	8000484 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	4a64      	ldr	r2, [pc, #400]	@ (8000554 <GPIO_PeriClockControl+0x1a8>)
 80003c2:	4293      	cmp	r3, r2
 80003c4:	d106      	bne.n	80003d4 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80003c6:	4b64      	ldr	r3, [pc, #400]	@ (8000558 <GPIO_PeriClockControl+0x1ac>)
 80003c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ca:	4a63      	ldr	r2, [pc, #396]	@ (8000558 <GPIO_PeriClockControl+0x1ac>)
 80003cc:	f043 0301 	orr.w	r3, r3, #1
 80003d0:	6313      	str	r3, [r2, #48]	@ 0x30
			GPIOI_PCLK_DI();
		}

	}

}
 80003d2:	e0b9      	b.n	8000548 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4a61      	ldr	r2, [pc, #388]	@ (800055c <GPIO_PeriClockControl+0x1b0>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	d106      	bne.n	80003ea <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003dc:	4b5e      	ldr	r3, [pc, #376]	@ (8000558 <GPIO_PeriClockControl+0x1ac>)
 80003de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003e0:	4a5d      	ldr	r2, [pc, #372]	@ (8000558 <GPIO_PeriClockControl+0x1ac>)
 80003e2:	f043 0302 	orr.w	r3, r3, #2
 80003e6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003e8:	e0ae      	b.n	8000548 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4a5c      	ldr	r2, [pc, #368]	@ (8000560 <GPIO_PeriClockControl+0x1b4>)
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d106      	bne.n	8000400 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003f2:	4b59      	ldr	r3, [pc, #356]	@ (8000558 <GPIO_PeriClockControl+0x1ac>)
 80003f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f6:	4a58      	ldr	r2, [pc, #352]	@ (8000558 <GPIO_PeriClockControl+0x1ac>)
 80003f8:	f043 0304 	orr.w	r3, r3, #4
 80003fc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003fe:	e0a3      	b.n	8000548 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	4a58      	ldr	r2, [pc, #352]	@ (8000564 <GPIO_PeriClockControl+0x1b8>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d106      	bne.n	8000416 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000408:	4b53      	ldr	r3, [pc, #332]	@ (8000558 <GPIO_PeriClockControl+0x1ac>)
 800040a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800040c:	4a52      	ldr	r2, [pc, #328]	@ (8000558 <GPIO_PeriClockControl+0x1ac>)
 800040e:	f043 0308 	orr.w	r3, r3, #8
 8000412:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000414:	e098      	b.n	8000548 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4a53      	ldr	r2, [pc, #332]	@ (8000568 <GPIO_PeriClockControl+0x1bc>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d106      	bne.n	800042c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800041e:	4b4e      	ldr	r3, [pc, #312]	@ (8000558 <GPIO_PeriClockControl+0x1ac>)
 8000420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000422:	4a4d      	ldr	r2, [pc, #308]	@ (8000558 <GPIO_PeriClockControl+0x1ac>)
 8000424:	f043 0310 	orr.w	r3, r3, #16
 8000428:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800042a:	e08d      	b.n	8000548 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4a4f      	ldr	r2, [pc, #316]	@ (800056c <GPIO_PeriClockControl+0x1c0>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d106      	bne.n	8000442 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000434:	4b48      	ldr	r3, [pc, #288]	@ (8000558 <GPIO_PeriClockControl+0x1ac>)
 8000436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000438:	4a47      	ldr	r2, [pc, #284]	@ (8000558 <GPIO_PeriClockControl+0x1ac>)
 800043a:	f043 0320 	orr.w	r3, r3, #32
 800043e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000440:	e082      	b.n	8000548 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	4a4a      	ldr	r2, [pc, #296]	@ (8000570 <GPIO_PeriClockControl+0x1c4>)
 8000446:	4293      	cmp	r3, r2
 8000448:	d106      	bne.n	8000458 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800044a:	4b43      	ldr	r3, [pc, #268]	@ (8000558 <GPIO_PeriClockControl+0x1ac>)
 800044c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800044e:	4a42      	ldr	r2, [pc, #264]	@ (8000558 <GPIO_PeriClockControl+0x1ac>)
 8000450:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000454:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000456:	e077      	b.n	8000548 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4a46      	ldr	r2, [pc, #280]	@ (8000574 <GPIO_PeriClockControl+0x1c8>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d106      	bne.n	800046e <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000460:	4b3d      	ldr	r3, [pc, #244]	@ (8000558 <GPIO_PeriClockControl+0x1ac>)
 8000462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000464:	4a3c      	ldr	r2, [pc, #240]	@ (8000558 <GPIO_PeriClockControl+0x1ac>)
 8000466:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800046a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800046c:	e06c      	b.n	8000548 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4a41      	ldr	r2, [pc, #260]	@ (8000578 <GPIO_PeriClockControl+0x1cc>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d168      	bne.n	8000548 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000476:	4b38      	ldr	r3, [pc, #224]	@ (8000558 <GPIO_PeriClockControl+0x1ac>)
 8000478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800047a:	4a37      	ldr	r2, [pc, #220]	@ (8000558 <GPIO_PeriClockControl+0x1ac>)
 800047c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000480:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000482:	e061      	b.n	8000548 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4a33      	ldr	r2, [pc, #204]	@ (8000554 <GPIO_PeriClockControl+0x1a8>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d106      	bne.n	800049a <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 800048c:	4b32      	ldr	r3, [pc, #200]	@ (8000558 <GPIO_PeriClockControl+0x1ac>)
 800048e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000490:	4a31      	ldr	r2, [pc, #196]	@ (8000558 <GPIO_PeriClockControl+0x1ac>)
 8000492:	f023 0301 	bic.w	r3, r3, #1
 8000496:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000498:	e056      	b.n	8000548 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4a2f      	ldr	r2, [pc, #188]	@ (800055c <GPIO_PeriClockControl+0x1b0>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d106      	bne.n	80004b0 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 80004a2:	4b2d      	ldr	r3, [pc, #180]	@ (8000558 <GPIO_PeriClockControl+0x1ac>)
 80004a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004a6:	4a2c      	ldr	r2, [pc, #176]	@ (8000558 <GPIO_PeriClockControl+0x1ac>)
 80004a8:	f023 0302 	bic.w	r3, r3, #2
 80004ac:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004ae:	e04b      	b.n	8000548 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4a2b      	ldr	r2, [pc, #172]	@ (8000560 <GPIO_PeriClockControl+0x1b4>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d106      	bne.n	80004c6 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 80004b8:	4b27      	ldr	r3, [pc, #156]	@ (8000558 <GPIO_PeriClockControl+0x1ac>)
 80004ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004bc:	4a26      	ldr	r2, [pc, #152]	@ (8000558 <GPIO_PeriClockControl+0x1ac>)
 80004be:	f023 0304 	bic.w	r3, r3, #4
 80004c2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004c4:	e040      	b.n	8000548 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4a26      	ldr	r2, [pc, #152]	@ (8000564 <GPIO_PeriClockControl+0x1b8>)
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d106      	bne.n	80004dc <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 80004ce:	4b22      	ldr	r3, [pc, #136]	@ (8000558 <GPIO_PeriClockControl+0x1ac>)
 80004d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d2:	4a21      	ldr	r2, [pc, #132]	@ (8000558 <GPIO_PeriClockControl+0x1ac>)
 80004d4:	f023 0308 	bic.w	r3, r3, #8
 80004d8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004da:	e035      	b.n	8000548 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	4a22      	ldr	r2, [pc, #136]	@ (8000568 <GPIO_PeriClockControl+0x1bc>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d106      	bne.n	80004f2 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 80004e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000558 <GPIO_PeriClockControl+0x1ac>)
 80004e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000558 <GPIO_PeriClockControl+0x1ac>)
 80004ea:	f023 0310 	bic.w	r3, r3, #16
 80004ee:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004f0:	e02a      	b.n	8000548 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4a1d      	ldr	r2, [pc, #116]	@ (800056c <GPIO_PeriClockControl+0x1c0>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d106      	bne.n	8000508 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 80004fa:	4b17      	ldr	r3, [pc, #92]	@ (8000558 <GPIO_PeriClockControl+0x1ac>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fe:	4a16      	ldr	r2, [pc, #88]	@ (8000558 <GPIO_PeriClockControl+0x1ac>)
 8000500:	f023 0320 	bic.w	r3, r3, #32
 8000504:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000506:	e01f      	b.n	8000548 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	4a19      	ldr	r2, [pc, #100]	@ (8000570 <GPIO_PeriClockControl+0x1c4>)
 800050c:	4293      	cmp	r3, r2
 800050e:	d106      	bne.n	800051e <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000510:	4b11      	ldr	r3, [pc, #68]	@ (8000558 <GPIO_PeriClockControl+0x1ac>)
 8000512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000514:	4a10      	ldr	r2, [pc, #64]	@ (8000558 <GPIO_PeriClockControl+0x1ac>)
 8000516:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800051a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800051c:	e014      	b.n	8000548 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4a14      	ldr	r2, [pc, #80]	@ (8000574 <GPIO_PeriClockControl+0x1c8>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d106      	bne.n	8000534 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000526:	4b0c      	ldr	r3, [pc, #48]	@ (8000558 <GPIO_PeriClockControl+0x1ac>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	4a0b      	ldr	r2, [pc, #44]	@ (8000558 <GPIO_PeriClockControl+0x1ac>)
 800052c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000530:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000532:	e009      	b.n	8000548 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4a10      	ldr	r2, [pc, #64]	@ (8000578 <GPIO_PeriClockControl+0x1cc>)
 8000538:	4293      	cmp	r3, r2
 800053a:	d105      	bne.n	8000548 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 800053c:	4b06      	ldr	r3, [pc, #24]	@ (8000558 <GPIO_PeriClockControl+0x1ac>)
 800053e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000540:	4a05      	ldr	r2, [pc, #20]	@ (8000558 <GPIO_PeriClockControl+0x1ac>)
 8000542:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000546:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	40020000 	.word	0x40020000
 8000558:	40023800 	.word	0x40023800
 800055c:	40020400 	.word	0x40020400
 8000560:	40020800 	.word	0x40020800
 8000564:	40020c00 	.word	0x40020c00
 8000568:	40021000 	.word	0x40021000
 800056c:	40021400 	.word	0x40021400
 8000570:	40021800 	.word	0x40021800
 8000574:	40021c00 	.word	0x40021c00
 8000578:	40022000 	.word	0x40022000

0800057c <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 8000584:	2300      	movs	r3, #0
 8000586:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2101      	movs	r1, #1
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff ff0c 	bl	80003ac <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	795b      	ldrb	r3, [r3, #5]
 8000598:	2b03      	cmp	r3, #3
 800059a:	d820      	bhi.n	80005de <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	795b      	ldrb	r3, [r3, #5]
 80005a0:	461a      	mov	r2, r3
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	791b      	ldrb	r3, [r3, #4]
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	fa02 f303 	lsl.w	r3, r2, r3
 80005ac:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	681a      	ldr	r2, [r3, #0]
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	791b      	ldrb	r3, [r3, #4]
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	2103      	movs	r1, #3
 80005bc:	fa01 f303 	lsl.w	r3, r1, r3
 80005c0:	43db      	mvns	r3, r3
 80005c2:	4619      	mov	r1, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	400a      	ands	r2, r1
 80005ca:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	6819      	ldr	r1, [r3, #0]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	697a      	ldr	r2, [r7, #20]
 80005d8:	430a      	orrs	r2, r1
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	e0a4      	b.n	8000728 <GPIO_Init+0x1ac>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	795b      	ldrb	r3, [r3, #5]
 80005e2:	2b04      	cmp	r3, #4
 80005e4:	d117      	bne.n	8000616 <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005e6:	4b9c      	ldr	r3, [pc, #624]	@ (8000858 <GPIO_Init+0x2dc>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	7912      	ldrb	r2, [r2, #4]
 80005ee:	4611      	mov	r1, r2
 80005f0:	2201      	movs	r2, #1
 80005f2:	408a      	lsls	r2, r1
 80005f4:	4611      	mov	r1, r2
 80005f6:	4a98      	ldr	r2, [pc, #608]	@ (8000858 <GPIO_Init+0x2dc>)
 80005f8:	430b      	orrs	r3, r1
 80005fa:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005fc:	4b96      	ldr	r3, [pc, #600]	@ (8000858 <GPIO_Init+0x2dc>)
 80005fe:	689b      	ldr	r3, [r3, #8]
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	7912      	ldrb	r2, [r2, #4]
 8000604:	4611      	mov	r1, r2
 8000606:	2201      	movs	r2, #1
 8000608:	408a      	lsls	r2, r1
 800060a:	43d2      	mvns	r2, r2
 800060c:	4611      	mov	r1, r2
 800060e:	4a92      	ldr	r2, [pc, #584]	@ (8000858 <GPIO_Init+0x2dc>)
 8000610:	400b      	ands	r3, r1
 8000612:	6093      	str	r3, [r2, #8]
 8000614:	e035      	b.n	8000682 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	795b      	ldrb	r3, [r3, #5]
 800061a:	2b05      	cmp	r3, #5
 800061c:	d117      	bne.n	800064e <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800061e:	4b8e      	ldr	r3, [pc, #568]	@ (8000858 <GPIO_Init+0x2dc>)
 8000620:	689b      	ldr	r3, [r3, #8]
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	7912      	ldrb	r2, [r2, #4]
 8000626:	4611      	mov	r1, r2
 8000628:	2201      	movs	r2, #1
 800062a:	408a      	lsls	r2, r1
 800062c:	4611      	mov	r1, r2
 800062e:	4a8a      	ldr	r2, [pc, #552]	@ (8000858 <GPIO_Init+0x2dc>)
 8000630:	430b      	orrs	r3, r1
 8000632:	6093      	str	r3, [r2, #8]
			//Clear the corresponding FTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000634:	4b88      	ldr	r3, [pc, #544]	@ (8000858 <GPIO_Init+0x2dc>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	7912      	ldrb	r2, [r2, #4]
 800063c:	4611      	mov	r1, r2
 800063e:	2201      	movs	r2, #1
 8000640:	408a      	lsls	r2, r1
 8000642:	43d2      	mvns	r2, r2
 8000644:	4611      	mov	r1, r2
 8000646:	4a84      	ldr	r2, [pc, #528]	@ (8000858 <GPIO_Init+0x2dc>)
 8000648:	400b      	ands	r3, r1
 800064a:	60d3      	str	r3, [r2, #12]
 800064c:	e019      	b.n	8000682 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	795b      	ldrb	r3, [r3, #5]
 8000652:	2b06      	cmp	r3, #6
 8000654:	d115      	bne.n	8000682 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000656:	4b80      	ldr	r3, [pc, #512]	@ (8000858 <GPIO_Init+0x2dc>)
 8000658:	689b      	ldr	r3, [r3, #8]
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	7912      	ldrb	r2, [r2, #4]
 800065e:	4611      	mov	r1, r2
 8000660:	2201      	movs	r2, #1
 8000662:	408a      	lsls	r2, r1
 8000664:	4611      	mov	r1, r2
 8000666:	4a7c      	ldr	r2, [pc, #496]	@ (8000858 <GPIO_Init+0x2dc>)
 8000668:	430b      	orrs	r3, r1
 800066a:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800066c:	4b7a      	ldr	r3, [pc, #488]	@ (8000858 <GPIO_Init+0x2dc>)
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	687a      	ldr	r2, [r7, #4]
 8000672:	7912      	ldrb	r2, [r2, #4]
 8000674:	4611      	mov	r1, r2
 8000676:	2201      	movs	r2, #1
 8000678:	408a      	lsls	r2, r1
 800067a:	4611      	mov	r1, r2
 800067c:	4a76      	ldr	r2, [pc, #472]	@ (8000858 <GPIO_Init+0x2dc>)
 800067e:	430b      	orrs	r3, r1
 8000680:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	791b      	ldrb	r3, [r3, #4]
 8000686:	089b      	lsrs	r3, r3, #2
 8000688:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	791b      	ldrb	r3, [r3, #4]
 800068e:	f003 0303 	and.w	r3, r3, #3
 8000692:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a70      	ldr	r2, [pc, #448]	@ (800085c <GPIO_Init+0x2e0>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d032      	beq.n	8000704 <GPIO_Init+0x188>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a6f      	ldr	r2, [pc, #444]	@ (8000860 <GPIO_Init+0x2e4>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d02b      	beq.n	8000700 <GPIO_Init+0x184>
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a6d      	ldr	r2, [pc, #436]	@ (8000864 <GPIO_Init+0x2e8>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d024      	beq.n	80006fc <GPIO_Init+0x180>
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a6c      	ldr	r2, [pc, #432]	@ (8000868 <GPIO_Init+0x2ec>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d01d      	beq.n	80006f8 <GPIO_Init+0x17c>
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a6a      	ldr	r2, [pc, #424]	@ (800086c <GPIO_Init+0x2f0>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d016      	beq.n	80006f4 <GPIO_Init+0x178>
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a69      	ldr	r2, [pc, #420]	@ (8000870 <GPIO_Init+0x2f4>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d00f      	beq.n	80006f0 <GPIO_Init+0x174>
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a67      	ldr	r2, [pc, #412]	@ (8000874 <GPIO_Init+0x2f8>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d008      	beq.n	80006ec <GPIO_Init+0x170>
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a66      	ldr	r2, [pc, #408]	@ (8000878 <GPIO_Init+0x2fc>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d101      	bne.n	80006e8 <GPIO_Init+0x16c>
 80006e4:	2307      	movs	r3, #7
 80006e6:	e00e      	b.n	8000706 <GPIO_Init+0x18a>
 80006e8:	2300      	movs	r3, #0
 80006ea:	e00c      	b.n	8000706 <GPIO_Init+0x18a>
 80006ec:	2306      	movs	r3, #6
 80006ee:	e00a      	b.n	8000706 <GPIO_Init+0x18a>
 80006f0:	2305      	movs	r3, #5
 80006f2:	e008      	b.n	8000706 <GPIO_Init+0x18a>
 80006f4:	2304      	movs	r3, #4
 80006f6:	e006      	b.n	8000706 <GPIO_Init+0x18a>
 80006f8:	2303      	movs	r3, #3
 80006fa:	e004      	b.n	8000706 <GPIO_Init+0x18a>
 80006fc:	2302      	movs	r3, #2
 80006fe:	e002      	b.n	8000706 <GPIO_Init+0x18a>
 8000700:	2301      	movs	r3, #1
 8000702:	e000      	b.n	8000706 <GPIO_Init+0x18a>
 8000704:	2300      	movs	r3, #0
 8000706:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000708:	4b5c      	ldr	r3, [pc, #368]	@ (800087c <GPIO_Init+0x300>)
 800070a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800070c:	4a5b      	ldr	r2, [pc, #364]	@ (800087c <GPIO_Init+0x300>)
 800070e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000712:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000714:	7c7a      	ldrb	r2, [r7, #17]
 8000716:	7cbb      	ldrb	r3, [r7, #18]
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	fa02 f103 	lsl.w	r1, r2, r3
 800071e:	4a58      	ldr	r2, [pc, #352]	@ (8000880 <GPIO_Init+0x304>)
 8000720:	7cfb      	ldrb	r3, [r7, #19]
 8000722:	3302      	adds	r3, #2
 8000724:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		//3 . enable the exti interrupt delivery using IMR
//		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	799b      	ldrb	r3, [r3, #6]
 800072c:	461a      	mov	r2, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	791b      	ldrb	r3, [r3, #4]
 8000732:	005b      	lsls	r3, r3, #1
 8000734:	fa02 f303 	lsl.w	r3, r2, r3
 8000738:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	689a      	ldr	r2, [r3, #8]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	791b      	ldrb	r3, [r3, #4]
 8000744:	005b      	lsls	r3, r3, #1
 8000746:	2103      	movs	r1, #3
 8000748:	fa01 f303 	lsl.w	r3, r1, r3
 800074c:	43db      	mvns	r3, r3
 800074e:	4619      	mov	r1, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	400a      	ands	r2, r1
 8000756:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	6899      	ldr	r1, [r3, #8]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	697a      	ldr	r2, [r7, #20]
 8000764:	430a      	orrs	r2, r1
 8000766:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	79db      	ldrb	r3, [r3, #7]
 800076c:	461a      	mov	r2, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	791b      	ldrb	r3, [r3, #4]
 8000772:	005b      	lsls	r3, r3, #1
 8000774:	fa02 f303 	lsl.w	r3, r2, r3
 8000778:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	68da      	ldr	r2, [r3, #12]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	791b      	ldrb	r3, [r3, #4]
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	2103      	movs	r1, #3
 8000788:	fa01 f303 	lsl.w	r3, r1, r3
 800078c:	43db      	mvns	r3, r3
 800078e:	4619      	mov	r1, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	400a      	ands	r2, r1
 8000796:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	68d9      	ldr	r1, [r3, #12]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	697a      	ldr	r2, [r7, #20]
 80007a4:	430a      	orrs	r2, r1
 80007a6:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	7a1b      	ldrb	r3, [r3, #8]
 80007ac:	461a      	mov	r2, r3
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	791b      	ldrb	r3, [r3, #4]
 80007b2:	fa02 f303 	lsl.w	r3, r2, r3
 80007b6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	685a      	ldr	r2, [r3, #4]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	791b      	ldrb	r3, [r3, #4]
 80007c2:	4619      	mov	r1, r3
 80007c4:	2301      	movs	r3, #1
 80007c6:	408b      	lsls	r3, r1
 80007c8:	43db      	mvns	r3, r3
 80007ca:	4619      	mov	r1, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	400a      	ands	r2, r1
 80007d2:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	6859      	ldr	r1, [r3, #4]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	697a      	ldr	r2, [r7, #20]
 80007e0:	430a      	orrs	r2, r1
 80007e2:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	795b      	ldrb	r3, [r3, #5]
 80007e8:	2b02      	cmp	r3, #2
 80007ea:	d131      	bne.n	8000850 <GPIO_Init+0x2d4>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	791b      	ldrb	r3, [r3, #4]
 80007f0:	08db      	lsrs	r3, r3, #3
 80007f2:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	791b      	ldrb	r3, [r3, #4]
 80007f8:	f003 0307 	and.w	r3, r3, #7
 80007fc:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	7c3a      	ldrb	r2, [r7, #16]
 8000804:	3208      	adds	r2, #8
 8000806:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800080a:	7bfb      	ldrb	r3, [r7, #15]
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	220f      	movs	r2, #15
 8000810:	fa02 f303 	lsl.w	r3, r2, r3
 8000814:	43db      	mvns	r3, r3
 8000816:	4618      	mov	r0, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	7c3a      	ldrb	r2, [r7, #16]
 800081e:	4001      	ands	r1, r0
 8000820:	3208      	adds	r2, #8
 8000822:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	7c3a      	ldrb	r2, [r7, #16]
 800082c:	3208      	adds	r2, #8
 800082e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	7a5b      	ldrb	r3, [r3, #9]
 8000836:	461a      	mov	r2, r3
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	fa02 f303 	lsl.w	r3, r2, r3
 8000840:	4618      	mov	r0, r3
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	7c3a      	ldrb	r2, [r7, #16]
 8000848:	4301      	orrs	r1, r0
 800084a:	3208      	adds	r2, #8
 800084c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000850:	bf00      	nop
 8000852:	3718      	adds	r7, #24
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40013c00 	.word	0x40013c00
 800085c:	40020000 	.word	0x40020000
 8000860:	40020400 	.word	0x40020400
 8000864:	40020800 	.word	0x40020800
 8000868:	40020c00 	.word	0x40020c00
 800086c:	40021000 	.word	0x40021000
 8000870:	40021400 	.word	0x40021400
 8000874:	40021800 	.word	0x40021800
 8000878:	40021c00 	.word	0x40021c00
 800087c:	40023800 	.word	0x40023800
 8000880:	40013800 	.word	0x40013800

08000884 <GPIO_ReadFromInputPin>:
 *
 * @Note              -

 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	460b      	mov	r3, r1
 800088e:	70fb      	strb	r3, [r7, #3]
   uint8_t value;

   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	691a      	ldr	r2, [r3, #16]
 8000894:	78fb      	ldrb	r3, [r7, #3]
 8000896:	fa22 f303 	lsr.w	r3, r2, r3
 800089a:	b2db      	uxtb	r3, r3
 800089c:	f003 0301 	and.w	r3, r3, #1
 80008a0:	73fb      	strb	r3, [r7, #15]

   return value;
 80008a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3714      	adds	r7, #20
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <SPI_PeriClockControl>:
 *
 * @Note              -

 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	460b      	mov	r3, r1
 80008ba:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 80008bc:	78fb      	ldrb	r3, [r7, #3]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d120      	bne.n	8000904 <SPI_PeriClockControl+0x54>
	{
		if(pSPIx == SPI1)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4a22      	ldr	r2, [pc, #136]	@ (8000950 <SPI_PeriClockControl+0xa0>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d106      	bne.n	80008d8 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 80008ca:	4b22      	ldr	r3, [pc, #136]	@ (8000954 <SPI_PeriClockControl+0xa4>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ce:	4a21      	ldr	r2, [pc, #132]	@ (8000954 <SPI_PeriClockControl+0xa4>)
 80008d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80008d4:	6453      	str	r3, [r2, #68]	@ 0x44
		}else if (pSPIx == SPI3)
		{
			SPI3_PCLK_DI();
		}
	}
}
 80008d6:	e035      	b.n	8000944 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI2)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4a1f      	ldr	r2, [pc, #124]	@ (8000958 <SPI_PeriClockControl+0xa8>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d106      	bne.n	80008ee <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 80008e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000954 <SPI_PeriClockControl+0xa4>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e4:	4a1b      	ldr	r2, [pc, #108]	@ (8000954 <SPI_PeriClockControl+0xa4>)
 80008e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008ea:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008ec:	e02a      	b.n	8000944 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI3)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4a1a      	ldr	r2, [pc, #104]	@ (800095c <SPI_PeriClockControl+0xac>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d126      	bne.n	8000944 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 80008f6:	4b17      	ldr	r3, [pc, #92]	@ (8000954 <SPI_PeriClockControl+0xa4>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fa:	4a16      	ldr	r2, [pc, #88]	@ (8000954 <SPI_PeriClockControl+0xa4>)
 80008fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000900:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000902:	e01f      	b.n	8000944 <SPI_PeriClockControl+0x94>
		if(pSPIx == SPI1)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4a12      	ldr	r2, [pc, #72]	@ (8000950 <SPI_PeriClockControl+0xa0>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d106      	bne.n	800091a <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_DI();
 800090c:	4b11      	ldr	r3, [pc, #68]	@ (8000954 <SPI_PeriClockControl+0xa4>)
 800090e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000910:	4a10      	ldr	r2, [pc, #64]	@ (8000954 <SPI_PeriClockControl+0xa4>)
 8000912:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000916:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000918:	e014      	b.n	8000944 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI2)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4a0e      	ldr	r2, [pc, #56]	@ (8000958 <SPI_PeriClockControl+0xa8>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d106      	bne.n	8000930 <SPI_PeriClockControl+0x80>
			SPI2_PCLK_DI();
 8000922:	4b0c      	ldr	r3, [pc, #48]	@ (8000954 <SPI_PeriClockControl+0xa4>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000926:	4a0b      	ldr	r2, [pc, #44]	@ (8000954 <SPI_PeriClockControl+0xa4>)
 8000928:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800092c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800092e:	e009      	b.n	8000944 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI3)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4a0a      	ldr	r2, [pc, #40]	@ (800095c <SPI_PeriClockControl+0xac>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d105      	bne.n	8000944 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DI();
 8000938:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <SPI_PeriClockControl+0xa4>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093c:	4a05      	ldr	r2, [pc, #20]	@ (8000954 <SPI_PeriClockControl+0xa4>)
 800093e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000942:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	40013000 	.word	0x40013000
 8000954:	40023800 	.word	0x40023800
 8000958:	40003800 	.word	0x40003800
 800095c:	40003c00 	.word	0x40003c00

08000960 <SPI_Init>:
 *
 * @Note              -

 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]

	//peripheral clock enable

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2101      	movs	r1, #1
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff ff9e 	bl	80008b0 <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR ;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	791b      	ldrb	r3, [r3, #4]
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	68fa      	ldr	r2, [r7, #12]
 8000980:	4313      	orrs	r3, r2
 8000982:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	795b      	ldrb	r3, [r3, #5]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d104      	bne.n	8000996 <SPI_Init+0x36>
	{
		//bidi mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	e014      	b.n	80009c0 <SPI_Init+0x60>

	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	795b      	ldrb	r3, [r3, #5]
 800099a:	2b02      	cmp	r3, #2
 800099c:	d104      	bne.n	80009a8 <SPI_Init+0x48>
	{
		//bidi mode should be set
		tempreg |= ( 1 << SPI_CR1_BIDIMODE);
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	e00b      	b.n	80009c0 <SPI_Init+0x60>
	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	795b      	ldrb	r3, [r3, #5]
 80009ac:	2b03      	cmp	r3, #3
 80009ae:	d107      	bne.n	80009c0 <SPI_Init+0x60>
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80009b6:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= ( 1 << SPI_CR1_RXONLY);
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009be:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	799b      	ldrb	r3, [r3, #6]
 80009c4:	00db      	lsls	r3, r3, #3
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	60fb      	str	r3, [r7, #12]

	//4.  Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	79db      	ldrb	r3, [r3, #7]
 80009d0:	02db      	lsls	r3, r3, #11
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	60fb      	str	r3, [r7, #12]

	//5. configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	7a1b      	ldrb	r3, [r3, #8]
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	68fa      	ldr	r2, [r7, #12]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	60fb      	str	r3, [r7, #12]

	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	7a5b      	ldrb	r3, [r3, #9]
 80009e8:	461a      	mov	r2, r3
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	7a9b      	ldrb	r3, [r3, #10]
 80009f4:	025b      	lsls	r3, r3, #9
 80009f6:	68fa      	ldr	r2, [r7, #12]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	68fa      	ldr	r2, [r7, #12]
 8000a02:	601a      	str	r2, [r3, #0]

}
 8000a04:	bf00      	nop
 8000a06:	3710      	adds	r7, #16
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <SPI_GetFlagStatus>:
		SPI3_REG_RESET();
	} //todo
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx , uint32_t FlagName)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	689a      	ldr	r2, [r3, #8]
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000a22:	2301      	movs	r3, #1
 8000a24:	e000      	b.n	8000a28 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000a26:	2300      	movs	r3, #0
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <SPI_SendData>:
 *
 * @Note              - This is blocking call

 */
void SPI_SendData(SPI_RegDef_t *pSPIx,uint8_t *pTxBuffer, uint32_t Len)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8000a40:	e027      	b.n	8000a92 <SPI_SendData+0x5e>
	{
		//1. wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG)  == FLAG_RESET );
 8000a42:	bf00      	nop
 8000a44:	2102      	movs	r1, #2
 8000a46:	68f8      	ldr	r0, [r7, #12]
 8000a48:	f7ff ffe0 	bl	8000a0c <SPI_GetFlagStatus>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d0f8      	beq.n	8000a44 <SPI_SendData+0x10>

		//2. check the DFF bit in CR1
		if( (pSPIx->CR1 & ( 1 << SPI_CR1_DFF) ) )
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d00e      	beq.n	8000a7c <SPI_SendData+0x48>
		{
			//16 bit DFF
			//1. load the data in to the DR
			pSPIx->DR =   *((uint16_t*)pTxBuffer);
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	881b      	ldrh	r3, [r3, #0]
 8000a62:	461a      	mov	r2, r3
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	60da      	str	r2, [r3, #12]
			Len--;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	607b      	str	r3, [r7, #4]
			Len--;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	3b01      	subs	r3, #1
 8000a72:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	3301      	adds	r3, #1
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	e00a      	b.n	8000a92 <SPI_SendData+0x5e>
		}else
		{
			//8 bit DFF
			pSPIx->DR =   *pTxBuffer;
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	461a      	mov	r2, r3
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	60da      	str	r2, [r3, #12]
			Len--;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	3b01      	subs	r3, #1
 8000a8a:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d1d4      	bne.n	8000a42 <SPI_SendData+0xe>
		}
	}

}
 8000a98:	bf00      	nop
 8000a9a:	bf00      	nop
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <SPI_PeripheralControl>:
 *
 * @Note              -

 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	b083      	sub	sp, #12
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
 8000aaa:	460b      	mov	r3, r1
 8000aac:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000aae:	78fb      	ldrb	r3, [r7, #3]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d106      	bne.n	8000ac2 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SPE);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
	}


}
 8000ac0:	e005      	b.n	8000ace <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	601a      	str	r2, [r3, #0]
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <SPI_SSOEConfig>:
 *
 * @Note              -

 */
void  SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000ada:	b480      	push	{r7}
 8000adc:	b083      	sub	sp, #12
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000ae6:	78fb      	ldrb	r3, [r7, #3]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d106      	bne.n	8000afa <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |=  (1 << SPI_CR2_SSOE);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f043 0204 	orr.w	r2, r3, #4
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	605a      	str	r2, [r3, #4]
	{
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
	}


}
 8000af8:	e005      	b.n	8000b06 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f023 0204 	bic.w	r2, r3, #4
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	605a      	str	r2, [r3, #4]
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
	...

08000b14 <__libc_init_array>:
 8000b14:	b570      	push	{r4, r5, r6, lr}
 8000b16:	4d0d      	ldr	r5, [pc, #52]	@ (8000b4c <__libc_init_array+0x38>)
 8000b18:	4c0d      	ldr	r4, [pc, #52]	@ (8000b50 <__libc_init_array+0x3c>)
 8000b1a:	1b64      	subs	r4, r4, r5
 8000b1c:	10a4      	asrs	r4, r4, #2
 8000b1e:	2600      	movs	r6, #0
 8000b20:	42a6      	cmp	r6, r4
 8000b22:	d109      	bne.n	8000b38 <__libc_init_array+0x24>
 8000b24:	4d0b      	ldr	r5, [pc, #44]	@ (8000b54 <__libc_init_array+0x40>)
 8000b26:	4c0c      	ldr	r4, [pc, #48]	@ (8000b58 <__libc_init_array+0x44>)
 8000b28:	f000 f826 	bl	8000b78 <_init>
 8000b2c:	1b64      	subs	r4, r4, r5
 8000b2e:	10a4      	asrs	r4, r4, #2
 8000b30:	2600      	movs	r6, #0
 8000b32:	42a6      	cmp	r6, r4
 8000b34:	d105      	bne.n	8000b42 <__libc_init_array+0x2e>
 8000b36:	bd70      	pop	{r4, r5, r6, pc}
 8000b38:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b3c:	4798      	blx	r3
 8000b3e:	3601      	adds	r6, #1
 8000b40:	e7ee      	b.n	8000b20 <__libc_init_array+0xc>
 8000b42:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b46:	4798      	blx	r3
 8000b48:	3601      	adds	r6, #1
 8000b4a:	e7f2      	b.n	8000b32 <__libc_init_array+0x1e>
 8000b4c:	08000c64 	.word	0x08000c64
 8000b50:	08000c64 	.word	0x08000c64
 8000b54:	08000c64 	.word	0x08000c64
 8000b58:	08000c68 	.word	0x08000c68

08000b5c <memcpy>:
 8000b5c:	440a      	add	r2, r1
 8000b5e:	4291      	cmp	r1, r2
 8000b60:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b64:	d100      	bne.n	8000b68 <memcpy+0xc>
 8000b66:	4770      	bx	lr
 8000b68:	b510      	push	{r4, lr}
 8000b6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000b6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000b72:	4291      	cmp	r1, r2
 8000b74:	d1f9      	bne.n	8000b6a <memcpy+0xe>
 8000b76:	bd10      	pop	{r4, pc}

08000b78 <_init>:
 8000b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b7a:	bf00      	nop
 8000b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b7e:	bc08      	pop	{r3}
 8000b80:	469e      	mov	lr, r3
 8000b82:	4770      	bx	lr

08000b84 <_fini>:
 8000b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b86:	bf00      	nop
 8000b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b8a:	bc08      	pop	{r3}
 8000b8c:	469e      	mov	lr, r3
 8000b8e:	4770      	bx	lr
